source('D:/Projects/FYP/Code/preprocess.R')
source('D:/Projects/FYP/Code/preprocess.R')
dataset$InvoiceDate <- as.Date(dataset$InvoiceDate, format = "%Y-%m-%d %H:%M:%S")
totalamount <-aggregate(x = dataset$Revenue, by = list(dataset$InvoiceNo), FUN = sum)
colnames (totalamount) <- c("InvoiceNo", "TotalAmount")
summary(totalamount)
unique <-aggregate(x = dataset$StockCode, by = list(dataset$InvoiceNo), FUN = length)
str(invaggdata)
invaggdata <- na.omit(invaggdata)
custfreq <-aggregate(x = invaggdata$InvoiceNo, by = list(invaggdata$customerID), FUN = length)
custfreq <-aggregate(x = invaggdata$InvoiceNo, by = list(invaggdata$customerID), FUN = length)
View(invaggdata)
custfreq <-aggregate(x = invaggdata$InvoiceNo, by = list(invaggdata$customerID), FUN = length)
invaggdata <- na.omit(invaggdata)
custfreq <-aggregate(x = invaggdata$InvoiceNo, by = list(invaggdata$CustomerID), FUN = length)
colnames (custfreq) <- c("CustomerID", "Frequency")
str(custfreq)
lastdate <-aggregate(x = invaggdata$Transactiondate, by = list(invaggdata$customerID), FUN = max)
lastdate <-aggregate(x = invaggdata$Transactiondate, by = list(invaggdata$CustomerID), FUN = max)
lastdate <-aggregate(x = invaggdata$Transactiondate, by = list(invaggdata$CustomerID), FUN = max)
lastdate <-aggregate(x = invaggdata$TransactionDate, by = list(invaggdata$CustomerID), FUN = max)
colnames (lastdate) <- c("CustomerID", "LastTransactionDate")
str(lastdate)
avgamount <-aggregate(x = invaggdata$totalamount, by = list(invaggdata$customerID), FUN = mean)
lastdate <-aggregate(x = invaggdata$TransactionDate, by = list(invaggdata$CustomerID), FUN = max)
colnames (lastdate) <- c("CustomerID", "LastTransactionDate")
str(lastdate)
avgamount <-aggregate(x = invaggdata$TotalAmount, by = list(invaggdata$CustomerID), FUN = mean)
colnames (avgamount) <- c("CustomerID", "AvgAmount")
str(avgamount)
totalamtpercust <-aggregate(x = invaggdata$Totalamount, by = list(invaggdata$CustomerID), FUN = sum)
totalamtpercust <-aggregate(x = invaggdata$TotalAmount, by = list(invaggdata$CustomerID), FUN = sum)
colnames (totalamtpercust) <- c("CustomerID", "TotalAmount")
str(totalamtpercust)
custaggdata <- Reduce(function(x,y) merge(x,y,all=TRUE, by="CustomerID"), list(custfreq, lastdate, avgamount, totalamount))
custaggdata <- Reduce(function(x,y) merge(x,y,all=TRUE, by="CustomerID"), list(custfreq, lastdate, avgamount, totalamount))
custaggdata <- Reduce(function(x,y) merge(x,y,all=TRUE, by="CustomerID"), list(custfreq, lastdate, avgamount, totalamtpercust))
str(custaggdata)
summary(custaggdata)
custaggdata$churn <- ifelse(custaggdata$LastTransactionDate > '2011-07-10',"0", "1")
str(custaggdata)
summary(custaggdata)
custaggdata$churn <- as.character(readr::parse_number(custaggdata$churn))
custaggdata$churn <- as.factor(readr::parse_number(custaggdata$churn))
custaggdata$customerID <- as.character(readr::parse_number(custaggdata$customerID))
custaggdata$customerID <- as.character(readr::parse_number(custaggdata$customerID))
custaggdata$customerID <- as.factor(readr::parse_number(custaggdata$customerID))
custaggdata$churn <- as.factor(custaggdata$churn)
source('D:/Projects/FYP/Code/preprocess.R')
source('D:/Projects/FYP/Code/algos.R')
summary(results)
results <- resamples(list(RF=modelrf, XGB=modelxgb, SVM=modelsvm))
summary(results)
dotplot(results)
testPred <- predict(modelrf, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
testPred <- predict(modelsvm, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
testPred <- predict(modelxgb, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
source('D:/Projects/FYP/Code/testing.R')
results <- resamples(list(RF=modelrf, XGB=modelxgb, SVM=modelsvm))
summary(results)
source('D:/Projects/FYP/Code/testing.R')
source('D:/Projects/FYP/Code/testing.R')
#RF
testPred <- predict(modelrf, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
#SVM
testPred <- predict(modelsvm, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
#XGB
testPred <- predict(modelxgb, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
results <- resamples(list(RF=modelrf, XGB=modelxgb, SVM=modelsvm))
summary(results)
dotplot(results)
source('D:/Projects/FYP/Code/testing.R')
source('D:/Projects/FYP/Code/testing.R')
source('D:/Projects/FYP/Code/testing.R')
source('D:/Projects/FYP/Code/testing.R')
source('D:/Projects/FYP/Code/testing.R')
View(custaggdata)
datacluster <- invaggdata[,c(2,4,5)]
hclusters <- hclust(dist(datacluster[, 2:3]))
View(datacluster)
set.seed(20)
kCluster <- kmeans(datacluster[, 1:3], 3, nstart = 20)
str(datacluster)
datacluster <- custaggdata[,c(2,4,5)]
str(datacluster)
source('D:/Projects/FYP/Code/segmentation.R')
hclusters <- hclust(dist(datacluster[, 2:3]))
plot(hclusters)
clusterCut <- cutree(hclusters, 5)
set.seed(20)
kCluster <- kmeans(datacluster[, 1:3], 3, nstart = 20)
kCluster
plot(datacluster,col=kCluster$cluster)
points(kCluster$center,col=1:2,pch=8,cex=1)
fit <-lm(TotalAmount ~ Frequency + Avgamount, data=datacluster)
fit <-lm(TotalAmount ~ Frequency + AvgAmount, data=datacluster)
summary(fit)
plot(fit)
View(dataTrain)
modelrf
confusionMatrix(modelrf)
confusionMatrix(modelrf)
modelrf
confusionMatrix(modelrf)
library(caret)
confusionMatrix(modelrf)
modelsvm
confusionMatrix(modelsvm)
confusionMatrix(modelxgb)
modelxgb
confusionMatrix(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
plot(modelrf)
plot(modelrf, log = y)
plot(modelrf, log = churn)
plot(modelrf, log = dataTrain$churn)
plot(modelrf, log = dataTrain$churn)
plot(testPred)
plot(postResample())
plot(postResample)
plot(sensitivity())
plot(confusionMatrix())
plot(testPred)
View(dataTrain)
View(customerID)
View(custaggdata)
View(invaggdata)
View(dataset)
da <- subset(dataset, dataset$Quantity>0)
dataset <- subset(dataset, dataset$Quantity>0)
dataset <- dataset %>% mutate(Revenue = Quantity * UnitPrice)
dataset <- dataset %>% mutate(Revenue = Quantity * UnitPrice)
source('D:/Projects/FYP/Code/preprocess.R')
source('D:/Projects/FYP/Code/training.R')
source('D:/Projects/FYP/Code/testing.R')
results <- resamples(list(RF=modelrf, XGB=modelxgb, SVM=modelsvm))
summary(results)
dotplot(results)
testPred <- predict(modelrf, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
testPred <- predict(modelsvm, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
testPred <- predict(modelxgb, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
View(custaggdata)
View(dataTrain)
View(dataset)
View(dataset)
View(invaggdata)
View(invaggdata)
boxplot(dataset)
boxplot(dataset$Quantity)
da <- dataset[-dataset$InvoiceNo==581483,]
da <- dataset[-dataset$InvoiceNo=581483,]
da <- dataset[dataset$InvoiceNo!=581483,]
da <- dataset[dataset$InvoiceNo!=541431,]
boxplot(da$Quantity)
View(da)
View(da)
da <- dataset[dataset$InvoiceNo!=541431,]
da <- dataset[dataset$InvoiceNo!=581483,]
View(da)
boxplot(da$Quantity)
da <- dataset[dataset$InvoiceNo!=541431,]
da <- da[da$InvoiceNo!=581483,]
boxplot(da$Quantity)
da <- da[da$InvoiceNo!=556444,]
boxplot(da$Quantity)
boxplot(da$Quantity)
boxplot(da$Revenue)
mean(da$Revenue)
barchart(da$Revenue)
hist(da$Revenue)
plot(da$Revenue)
plot(dataset$Revenue)
View(custaggdata)
View(custaggdata)
factor(dataset$Country)
View(dataset)
View(custaggdata)
invaggdata <- Reduce(function(x,y) merge(x,y,all=TRUE, by="InvoiceNo"), list(totalamount, unique, transDate, customerID))
str(invaggdata)
invaggdata <- na.omit(invaggdata)
print("Hi")
print(hi)
x <- 5
print("Finished loading data and preprocessing in " + x + " seconds.")
print("Finished loading data and preprocessing in ", x, " seconds.")
print("Finished loading data and preprocessing in ", x, " seconds.", sep=" ")
print("Finished loading data and preprocessing in ", " seconds.", sep=" ")
print("Finished loading data and preprocessing in "," seconds.", sep=" ")
paste(a,b,c)
paste("a","b","c")
paste("Finished loading data and preprocessing in "," seconds.")
paste("Finished loading data and preprocessing in ", x, " seconds.")
paste("Finished loading data and preprocessing in", x, "seconds.")
source("preprocess.R")
paste("Finished loading data and preprocessing in", loadTime, "seconds.")
loadTime
loadTime$user
loadTime[0]
proc.time() - startTime
loadTime[1]
paste("Finished loading data and preprocessing in", loadTime[1], "seconds.")
View(dataset)
class(dataset$InvoiceDate)
source("preprocess.R")
paste("Finished loading data and preprocessing in", loadTime[1], "seconds.")
time <- paste("Finished loading data and preprocessing in", loadTime[1], "seconds.")
startTime <- proc.time()
loadTime <- proc.time() - startTime
time <- paste("Finished loading data and preprocessing in", loadTime[1], "seconds.")
time
source('D:/Projects/FYP/Code/preprocess.R')
print(time)
source('D:/Projects/FYP/Code/preprocess.R')
print(paste("Dataset has", nrow(dataset), "observations.")
print(paste("Dataset has", nrow(dataset), "observations."))
print(paste("Dataset has", nrow(dataset), "observations."))
source('D:/Projects/FYP/Code/invoiceAggregate.R')
source('D:/Projects/FYP/Code/customerAggregate.R')
str(custaggdata)
summary(custaggdata)
source('D:/Projects/FYP/Code/customerAggregate.R')
source("training.R")
endTime[2]
endTime
rfTime <- paste("Finished training RF model in", endTime[1], "seconds. CPU Time =", endTime[1], "seconds.")
print(rfTime)
rfTime <- paste("Finished training RF model in", endTime[1], "seconds. CPU Time =", endTime[2], "seconds.")
print(rfTime)
svmTime <- paste("Finished training SVM model in", endTime[1], "seconds. CPU Time =", endTime[2], "seconds.")
print(svmTime)
print("Training models...")
set.seed(999)
customerData <- custaggdata[, -c(1,3)]
trainIndex <- createDataPartition(customerData$churn, p = .8,list = FALSE, times = 1)
head(trainIndex)
dataTrain <- customerData[ trainIndex,]
dataTest  <- customerData[-trainIndex,]
library("randomForest")
library("kernlab")
library("xgboost")
print("RANDOM FOREST...")
source('D:/Projects/FYP/Code/training.R')
source('D:/Projects/FYP/Code/testing.R')
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
print("Finshed testing. Check on the right for results.")
source('D:/Projects/FYP/Code/testing.R')
source('D:/Projects/FYP/Code/main.R')
R.version
T=table(Observed=dataTest$churn,Predicted=modelrf)
T=table(Observed=dataTest$churn,Predicted=testPred)
T
T=data.frame(Observed=dataTest$churn,Predicted=testPred)
T=data.frame(Observed=dataTest$churn,Predicted=testPred)
View(`T`)
confusionMatrix(testPred, dataTest$churn)
rfTable=data.frame(Observed=dataTest$churn,Predicted=testPred)
svmTable=data.frame(Observed=dataTest$churn,Predicted=testPred)
xgbTable=data.frame(Observed=dataTest$churn,Predicted=testPred)
View(rfTable)
View(svmTable)
View(xgbTable)
xgbTable=data.frame(Observed=dataTest$churn,Predicted=testPred)
testPred <- predict(modelxgb, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
xgbTable=data.frame(Observed=dataTest$churn,Predicted=testPred)
View(xgbTable)
view(summary(dataset))
summary(dataset)
summary(invaggdata)
View(invaggdata)
View(custaggdata)
summary(custaggdata)
View(dataset)
rfErr=1-sum(testPred==dataTest$churn)/length(dataTest$churn)
rfAcc = sum(testPred==dataTest$churn)/length(dataTest$churn)
rfErr=1-rfAcc
svmAcc = sum(testPred==dataTest$churn)/length(dataTest$churn)
svmErr=1-rfAcc
xgbAcc = sum(testPred==dataTest$churn)/length(dataTest$churn)
xgbErr=1-rfAcc
testPred <- predict(modelsvm, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
svmTable=data.frame(Observed=dataTest$churn,Predicted=testPred)
svmAcc = sum(testPred==dataTest$churn)/length(dataTest$churn)
svmErr=1-rfAcc
testPred <- predict(modelxgb, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
xgbTable=data.frame(Observed=dataTest$churn,Predicted=testPred)
xgbAcc = sum(testPred==dataTest$churn)/length(dataTest$churn)
xgbErr=1-rfAcc
testPred <- predict(modelxgb, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
xgbTable=data.frame(Observed=dataTest$churn,Predicted=testPred)
xgbAcc = sum(testPred==dataTest$churn)/length(dataTest$churn)
xgbErr=1-rfAcc
svmAcc = sum(testPred==dataTest$churn)/length(dataTest$churn)
svmErr=1-svmAcc
xgbAcc = sum(testPred==dataTest$churn)/length(dataTest$churn)
xgbErr=1-xgbcc
xgbErr=1-xgbAcc
source('D:/Projects/FYP/Code/testing.R')
source('D:/Projects/FYP/Code/main.R')
modelrf
confusionMatrix(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
View(invaggdata)
View(custaggdata)
View(dataTrain)
View(dataTest)
source('D:/Projects/FYP/Code/main.R')
source('D:/Projects/FYP/Code/main.R')
plot(testPred, dataTrain$churn, xlab="Predicted", ylab="Actual")
testPred
length(testPred)
length(dataTrain$churn)
plot(testPred, dataTest$churn, xlab="Predicted", ylab="Actual")
abline(a=0, b=1)
plot(testPred, dataTest$churn, xlab="Predicted", ylab="Actual", label="abc")
plot(testPred, dataTest$churn, xlab="Predicted", ylab="Actual", main="abc")
plot(testPred, dataTest$churn, xlab="Predicted", ylab="Actual", main="abc")
plot(testPred, dataTest$churn, xlab="Predicted", ylab="Actual", main="Random Forest")
testPred <- predict(modelrf, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
plot(postResample(testPred, dataTest$churn)_
plot(postResample(testPred, dataTest$churn))
testPred <- predict(modelrf, dataTest)
plot(testPred, dataTest$churn, xlab="Predicted", ylab="Actual", main="Random Forest")
testPred <- predict(modelsvm, dataTest)
plot(testPred, dataTest$churn, xlab="Predicted", ylab="Actual", main="Random Forest")
testPred <- predict(modelxgb, dataTest)
plot(testPred, dataTest$churn, xlab="Predicted", ylab="Actual", main="Random Forest")
plot(testPred, dataTest$churn, xlab="Predicted", ylab="Actual", main="Support Vector Machine")
testPred <- predict(modelsvm, dataTest)
plot(testPred, dataTest$churn, xlab="Predicted", ylab="Actual", main="Support Vector Machine")
testPred <- predict(modelxgb, dataTest)
plot(testPred, dataTest$churn, xlab="Predicted", ylab="Actual", main="Extreme Gradient Boosting")
plot(testPred, dataTest$churn, xlab="Predicted", ylab="Actual", main="Extreme Gradient Boosting", type="l")
plot(testPred, xlab="Predicted", ylab="Actual", main="Extreme Gradient Boosting", type="l")
plot(testPred, xlab="Predicted", ylab="Actual", main="Extreme Gradient Boosting", type="l")
results <- resamples(list(RF=modelrf, XGB=modelxgb, SVM=modelsvm))
summary(results)
dotplot(results)
modelrf
testPred <- predict(modelrf, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
source('D:/Projects/FYP/Code/training.R')
source('D:/Projects/FYP/Code/main.R')
modelrf
confusionMatrix(modelrf)
testPred <- predict(modelrf, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
testPred <- predict(modelsvm, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
testPred <- predict(modelxgb, dataTest)
postResample(testPred, dataTest$churn)
sensitivity(testPred, dataTest$churn)
confusionMatrix(testPred, dataTest$churn)
source('D:/Projects/FYP/Code/main.R')
source('D:/Projects/FYP/Code/main.R')
dotplot(results)
source('D:/Projects/FYP/Code/main.R')
